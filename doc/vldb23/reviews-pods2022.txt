SUBMISSION: 61
TITLE: DBSP: A General Framework for Automatic Incremental Computation

-------------------------  METAREVIEW  ------------------------
There is no metareview for this paper


----------------------- REVIEW 1 ---------------------
SUBMISSION: 61
TITLE: DBSP: A General Framework for Automatic Incremental Computation
AUTHORS: Mihai Budiu, Frank McSherry, Leonid Ryzhyk and Val Tannen

----------- Overall evaluation -----------
SCORE: 1 (weak accept)
----- TEXT:
The paper "DBSP: A General Framework for Automatic Incremental Computation" introduces the language DBSP, which is used to define operations on streams and is applied to the problem of Incremental View Maintenance.

A stream in the definition of the paper is a function that maps the natural numbers to an element, which in most cases comes from an Abelian group. For a stream s, s(t) = a if a is the value of the stream at time t.
In its visual representation, DBSP is a "circuit" of operators on streams, with core operators being the operations of the underlying Abelian group, delay (give at the t the value of time t-1) and lifting (apply an operation pointwise to every stream value).
From these, the operators "differentiation" and "integration" are defined, which decomposes a stream of evolving snapshots of an object into a stream of changes to that object in comparison to its previous version, and from a stream of changes constructs the stream of snapshots.
DBSP-"circuits" are not acyclic, they can feature backward edges which indicate a fixpoint computation.

The application to Incremental View Maintenance is as follows. A relational algebra query can be expressed as a DBSP-circuit. The goal is to devise a circuit that reads a stream of changes to a database and outputs a stream of changes to a view that is defined by a relational algebra query. In its general form, a DBSP-circuit that "solves" this problem first integrates the stream of changes into the current snapshot of the database, applies the query, and differentiates it again into a stream of changes.
Of course, this is not really an incremental approach, as the full database is constructed and the query is evaluated on it, which is precisely what Incremental View Maintenance wants to avoid.
The paper therefore introduces some optimization and rewriting rules that allow to bypass the integration into the full current database in certain cases. As concrete results, it mentions that linear operators (unary operators that are a homomorphism on the underlying Abelian group) and bilinear operators (binary operators that are linear in each argument, as for example joins) can be incrementally evaluated in linear and quadratic time in the size if the changes, respectively.
The authors mention that these results are well-known and argue that novelty lies in the modeling by DBSP.

Besides relational algebra, the paper also applies DBSP to recursive programs as stratified Datalog and shows how the can be "incrementalized" in general. Extensions as grouping, aggregation and computation over sliding windows are mentioned.

Although the paper does not offer new results immediately, I still find the change of perspective interesting. Although I am not sure how novel the interpretation of incremental view maintenance as stream processing actually is, the offered model seems to be quite expressive and it allows for formal reasoning over its operators.

The paper itself is written with great care, but would benefit from more explanations and examples, as for example presented in Appendix A.4. The formalism is at times very hard to parse, especially when it includes fixpoints (either in the general relational setting and in the setting of recursive programs). To get more familiar with the definition of Section 2, besides examples also the proofs would be interesting. The paper references a technical report, but it is not accessible for the review because of the double-blind submission.

In summary, the paper could be accepted for PODS. It would be great if the presentation could be made more accessible, maybe it is possible to allow more pages for this.

Some minor comments:
- you seem to assume that a database is empty at the beginning. Maybe make this explicit.
- page 2, bottom: T : S_A \times S_B *\rightarrow* S_B
- page 3: the formal statements with quantifies are hard to parse. For causality, you probably want to have the universal quantifier ranging not over the whole formula but only over the antecedent. Parentheses could make this clearer. Same for "strict".
- page 4, top right: \mathcal{D} instead of D in the picture.
- just below: "feedback loo*p*"
- page 5: what is I in Z[I]?
- Proposition 4.7 would benefit from an informal description. Same for similar definitions.
- page 6, left top: it is not immediate to me why Proposition 4.7 and Theorem 3.4 give these results.
- Definition 5.1: "if" missing
- page 6: right, (1): reference to Section 4 rather vague, please give a more precise pointer. The fixpoint computation in this circuit is quite hidden, no backward wire is visible.
- page 8, relational while queries: is "termination" guaranteed here? The semantics definition is not immediate to me here.



----------------------- REVIEW 2 ---------------------
SUBMISSION: 61
TITLE: DBSP: A General Framework for Automatic Incremental Computation
AUTHORS: Mihai Budiu, Frank McSherry, Leonid Ryzhyk and Val Tannen

----------- Overall evaluation -----------
SCORE: -1 (weak reject)
----- TEXT:
The main goal of this paper is to apply formalisms in digital signal processing (DSP) to the problem of incremental view maintenance. Specifically, they define a notion of incremental computation over streams, and an "incrementalization operator" with some desirable properties.
For this purpose, the authors view the database as the product of a stream of transactions. They define the view maintenance problem as that of computing the stream of changes to the original DB.


The introduction contains little to no motivation. Besides stating that incremental view maintenance is an important and studied problem, they do not specify what exactly are the problems their framework is addressing. Previous systems for IVM are not discussed, and it is not clear what their new system is capable of doing better/faster that previous systems cannot.
As far as I could understand, the main contribution of the paper is a new formalism applied to IVM. Perhaps this is a novel idea, but without any context it cannot be evaluated.
The introduction itself is unclear, containing many forward references, and un-defined technical concepts which, at this point, are unclear and unmotivated. For example, the "incrementalization operator" is extensively discussed without a definition. Linear queries are also not defined.



----------------------- REVIEW 3 ---------------------
SUBMISSION: 61
TITLE: DBSP: A General Framework for Automatic Incremental Computation
AUTHORS: Mihai Budiu, Frank McSherry, Leonid Ryzhyk and Val Tannen

----------- Overall evaluation -----------
SCORE: -1 (weak reject)
----- TEXT:
SUMMARY

This paper proposes a formal language, DBSP, and a corresponding framework in which to express streams and incremental computations. The main idea is to consider sequences of database "snapshots" and use stream operations to describe incremental computations based on deltas (i.e., changes between one snapshot and the previous one). The authors show how to describe recursive Datalog programs and incremental view maintenance for (positive) relational algebra. Examples of further extensions and applications of DBSP are then discussed.


EVALUATION

While the underlying idea of a framework for incremental computation based on streams and stream operations is enticing, the contributions of the paper in terms of concrete new results are rather limited. Most of the technical development of the paper relies on existing ideas, and shows how some known results from the literature can be obtained in the proposed framework.

It is known that incremental computation is typically more efficient than recomputation from scratch. The benefits provided by the general approach proposed in the paper are rather vague. Indeed, what the authors regard as one of the main contributions of their work, Algorithm 4.8, is too abstract and does not provide enough concrete details for some the outlined steps. For instance, step 2 prescribes the application of optimization rules to circuits obtained by translating relational algebra queries under Z-set semantics, but which rules are there aside from the explicitly mentioned consolidation of distinct? Step 5 says to apply the properties of the incremental version of stream operators to optimize the incremental implementation; given an incremental program/circuit, which of these properties should one apply? All of the applicable ones? In which order? Does that even matter? What is missing here is also a cost model that would support (the exploration of the search spac
e for) the optimization of (incremental) circuits.

No proofs are provided for most of the statements/results claimed in the paper, not even in the appendix. The only exceptions are for the "chain rule" of Proposition 3.2, which is straightforward, and Theorem 5.4. In addition, the proof of the latter is not as rigorous as it should be: it does include full details and looks more like a sketch. In the paper, the authors refer to a companion technical report with full proofs, but this is not made available even in anonymous form. It would also be nice if there were precise references for all of the known results mentioned in the paper, especially throughout Section 2.

In conclusion, while the paper may have some merits and perhaps the potential to lead to some interesting new work, in my opinion its current contributions are not deep and novel enough to warrant acceptance into PODS.


DETAILED COMMENTS

C1. The results on incremental view maintenance (Section 4) only apply to the positive fragment of relational algebra (on sets), not to the full language that includes the difference operations. This is because difference under Z-semantics does not coincide with difference under set-semantics [12]. Some claims made by the authors in this respect (e.g.; at the end of Section 1, when listing the contributions of the paper) are misleading and should be rephrased accordingly.

C2. In the complexity analysis of incremental view maintenance (end of Section 4.3), it is stated that while the distinct operator is not linear, its incremental version can also be evaluated in time linear w.r.t. the size of the changes. I find this rather odd, because the circuit in Proposition 4.7 uses integration, which reconstructs the entire updated database snapshot by applying the delta changes to the previous snapshot. This should be clarified.

C3. There expressiveness and complexity of the proposed DBSP language is not analyzed in detail. For example, what is its relationship with other languages, beyond Datalog and relational algebra on sets? Is equivalence of DBSP circuits/programs decidable (in some fragments)?

C4. The kind of join considered in Table 1 looks odd. What are c1 and c2 here? From the SQL formulation, it seems these are single attributes. But then intersection would not be a special case of such kind of (equi-)join (on one attribute). The DBSP expressions for Join and Intersection are the same: how can we distinguish whether we are dealing with one or the other operation? With a "natural join" (matching values of common attributes), this would be possible by looking at the attributes of the two inputs: if they are the same, then we have an intersection. Also, in terms of expressiveness, there is no need to include both Cartesian product and (natural) join in the language.


OTHER COMMENTS/TYPOS

- Definition 1: The set "\mathcal{S}_A" of all A-streams should be defined as "{ f \mid f \colon \mathbb{N} \to A }".

- Page 2, right, last paragraph: "T \colon \mathcal{S}_A \times \mathcal{S}_B \times \mathcal{S}_B" should read "T \colon \mathcal{S}_A \times \mathcal{S}_B \to \mathcal{S}_B"

- In English, "any" may mean both "every" and "some", and for this reason it would be best not used in formal statements (such as Definition 2.8 and Proposition 2.10).

- Page 3, right, second paragraph: "We show that following circuit" --> "We show that the following circuit".

- Section 4.2, first line: "The fact that the relational algebra" --> "The fact that relational algebra".

- Page 7, right: "applies f to the contents of each group" is at odds with what footnote 3 states.